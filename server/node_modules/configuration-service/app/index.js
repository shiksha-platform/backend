'use strict';

const FileSystemService = require('file-system-service');
const _ = require('lodash');
const path = require('path');

/* SYNCHRONOUS WARNING: Instantiation of this class is synchronous and waits on the filesystem.
 * Instantiation should not occur except during program start-up, or throughput and latency will suffer.
 */

module.exports = class ConfigurationService {

    /*
     * Static Getters and Methods
     */

    static _lookupEnvironmentVariable (name) {
        return process.env[name]; // eslint-disable-line no-process-env
    }

    static _joinPath (...args) {
        return path.join(...args);
    }

    constructor (configPath = 'config', configFileName = 'config.json') {
        this.configFileName = configFileName;
        this.configPath = configPath;
        this.config = null;

        this._setConfig();
    }

    getConfig () {
        return this.config;
    }

    _setConfig () {
        this._fetchRawConfig();
        this._parseConfig();
    }

    _fetchRawConfig () {
        // eslint-disable-next-line no-sync
        this.config = new FileSystemService().readJsonFileSync(this._pathToConfigFile());
    }

    _parseConfig () {
        this._overrideConfigFromFiles();
        this._overrideEnvironmentVariables();
    }

    _overrideConfigFromFiles () {
        const { configOverrideFiles } = this.config;
        const configOverrideFromFiles = this._lookupConfigOverrideFromFiles(configOverrideFiles, this.config);
        _.assign(this.config, configOverrideFromFiles);
    }

    _overrideEnvironmentVariables () {
        const environmentVariables = this._lookupEnvironmentVariables(this.config.environmentVariables);
        _.assign(this.config, { environmentVariables });
    }

    _lookupConfigOverrideFromFiles (fileMap, configJson) {
        if (!_.isPlainObject(fileMap)) {
            throw new Error('Missing or malformed configOverrideFiles in config!');
        }

        return _.transform(fileMap, (configOverride, fileName, settingName) => {
            if (!_.has(configJson, settingName)) {
                throw new Error(`Config override file found for "${settingName}", but setting not found in schema.`);
            }
            const pathToConfigOverrideFile = this._pathToConfigFile(fileName);
            try {
                // eslint-disable-next-line no-sync
                const fileContents = new FileSystemService().readFileSync(pathToConfigOverrideFile);
                _.set(configOverride, settingName, fileContents);
            } catch (err) {
                throw new Error(`Config override file "${pathToConfigOverrideFile}" not found for "${settingName}".`);
            }
        }, {});
    }

    _lookupEnvironmentVariables (environmentVariableDefaults) {
        if (!_.isPlainObject(environmentVariableDefaults)) {
            throw new Error('Missing or malformed environmentVariables in config!');
        }

        return _.mapValues(environmentVariableDefaults, (defaultValue, variableName) => {
            const lookupResult = ConfigurationService._lookupEnvironmentVariable(variableName);
            const overrideIsRequired = _.isNil(defaultValue);
            if (overrideIsRequired && _.isNil(lookupResult)) {
                throw new Error(`Missing environment variable: "${variableName}"`);
            }
            return _.isNil(lookupResult) ? defaultValue : lookupResult;
        });
    }

    _pathToConfigFile (fileName = this.configFileName) {
        return ConfigurationService._joinPath(this.configPath, fileName);
    }

};
