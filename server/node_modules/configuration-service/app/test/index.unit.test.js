'use strict';

const ConfigurationService = require('.');
const _ = require('lodash');
const assert = require('assert');
const expectError = require('expect-error');
const fs = require('fs');
const sinon = require('sinon');

describe('ConfigurationService', () => {
    const sandbox = sinon.sandbox.create();

    describe('#constructor', () => {
        afterEach(unmock);

        describe('finding the file', () => {
            it('default path, missing file', () => {
                const err = expectError(() => {
                    new ConfigurationService();
                });
                assert.equal(err.message, 'Could not read file: "config/config.json"');
            });

            it('custom path, missing file', () => {
                const err = expectError(() => {
                    new ConfigurationService('path/to/config', 'myConfigFile.json');
                });
                assert.equal(err.message, 'Could not read file: "path/to/config/myConfigFile.json"');
            });

            it('default path, file is present', () => {
                mockConfig('config/config.json', {
                    configOverrideFiles: {},
                    environmentVariables: {},
                })();

                new ConfigurationService();
            });

            it('custom path, file is present', () => {
                mockConfig('path/to/config/myConfigFile.json', {
                    configOverrideFiles: {},
                    environmentVariables: {},
                })();

                new ConfigurationService('path/to/config', 'myConfigFile.json');
            });
        });

        describe('parsing the file', () => {
            it('valid format', () => {
                mockConfig('config/config.json', {
                    configOverrideFiles: {},
                    environmentVariables: {},
                })();

                new ConfigurationService();
            });

            it('missing configOverrideFiles', () => {
                mockConfig('config/config.json', { environmentVariables: {} })();

                const err = expectError(() => {
                    new ConfigurationService();
                });
                assert.equal(err.message, 'Missing or malformed configOverrideFiles in config!');
            });

            it('configOverrideFiles is an array', () => {
                mockConfig('config/config.json', {
                    configOverrideFiles: [],
                    environmentVariables: {},
                })();

                const err = expectError(() => {
                    new ConfigurationService();
                });
                assert.equal(err.message, 'Missing or malformed configOverrideFiles in config!');
            });

            it('configOverrideFiles is a string', () => {
                mockConfig('config/config.json', {
                    configOverrideFiles: 'foobar',
                    environmentVariables: {},
                })();

                const err = expectError(() => {
                    new ConfigurationService();
                });
                assert.equal(err.message, 'Missing or malformed configOverrideFiles in config!');
            });

            it('missing environmentVariables', () => {
                mockConfig('config/config.json', { configOverrideFiles: {} })();

                const err = expectError(() => {
                    new ConfigurationService();
                });
                assert.equal(err.message, 'Missing or malformed environmentVariables in config!');
            });

            it('environmentVariables is an array', () => {
                mockConfig('config/config.json', {
                    configOverrideFiles: {},
                    environmentVariables: [],
                })();

                const err = expectError(() => {
                    new ConfigurationService();
                });
                assert.equal(err.message, 'Missing or malformed environmentVariables in config!');
            });

            it('environmentVariables is a string', () => {
                mockConfig('config/config.json', {
                    configOverrideFiles: {},
                    environmentVariables: 'foobar',
                })();

                const err = expectError(() => {
                    new ConfigurationService();
                });
                assert.equal(err.message, 'Missing or malformed environmentVariables in config!');
            });
        });
    });

    describe('#getConfig', () => {
        afterEach(unmock);

        it('simple config values', () => {
            const mockConfigJson = {
                configOverrideFiles: {},
                environmentVariables: {},
                simpleConfigItem: 'simpleConfigValue',
            };
            mockConfig('config/config.json', mockConfigJson)();

            const expected = _.cloneDeep(mockConfigJson);

            const config = new ConfigurationService().getConfig();
            assert.deepEqual(config, expected);
        });

        it('nested config values', () => {
            const mockConfigJson = {
                configOverrideFiles: {},
                environmentVariables: {},
                outerConfigItem: {
                    innerConfigItem: [
                        { foo: 'bar' },
                        42,
                    ],
                },
            };
            mockConfig('config/config.json', mockConfigJson)();

            const expected = _.cloneDeep(mockConfigJson);

            const config = new ConfigurationService().getConfig();
            assert.deepEqual(config, expected);
        });

        describe('environmentVariables config values', () => {
            it('env var with no default does not exist', () => {
                const mockConfigJson = {
                    configOverrideFiles: {},
                    environmentVariables: { envVar1: null },
                };
                mockConfig('config/config.json', mockConfigJson)();

                const err = expectError(() => {
                    new ConfigurationService().getConfig();
                });
                assert.equal(err.message, 'Missing environment variable: "envVar1"');
            });

            it('env var with default does not exist', () => {
                const mockConfigJson = {
                    configOverrideFiles: {},
                    environmentVariables: { envVar1: 'defaultValue' },
                };
                mockConfig('config/config.json', mockConfigJson)();

                const expected = _.cloneDeep(mockConfigJson);

                const config = new ConfigurationService().getConfig();
                assert.deepEqual(config, expected);
            });

            it('env var with no default exists', () => {
                const mockConfigJson = {
                    configOverrideFiles: {},
                    environmentVariables: { envVar1: null },
                };
                mockConfig('config/config.json', mockConfigJson)();

                const expected = _.cloneDeep(mockConfigJson);
                _.set(expected, 'environmentVariables.envVar1', 'envValue');

                let config = null;
                withEnvVars({ envVar1: 'envValue' }, () => {
                    config = new ConfigurationService().getConfig();
                });
                assert.deepEqual(config, expected);
            });

            it('env var with no default exists', () => {
                const mockConfigJson = {
                    configOverrideFiles: {},
                    environmentVariables: { envVar1: 'defaultValue' },
                };
                mockConfig('config/config.json', mockConfigJson)();

                const expected = _.cloneDeep(mockConfigJson);
                _.set(expected, 'environmentVariables.envVar1', 'envValue');

                let config = null;
                withEnvVars({ envVar1: 'envValue' }, () => {
                    config = new ConfigurationService().getConfig();
                });
                assert.deepEqual(config, expected);
            });
        });

        describe('configOverrideFiles config values', () => {
            it('config override file does not exist', () => {
                const mockConfigJson = {
                    configItemToOverride: 'initialConfigValue',
                    configOverrideFiles: { configItemToOverride: 'overrideConfigValue' },
                    environmentVariables: {},
                };
                mockConfig('config/config.json', mockConfigJson)();

                const err = expectError(() => {
                    new ConfigurationService().getConfig();
                });
                assert.equal(err.message,
                    'Config override file "config/overrideConfigValue" not found for "configItemToOverride".');
            });

            it('missing setting for config override file in schema', () => {
                const mockConfigJson = {
                    configOverrideFiles: { configItemToOverride: 'configOverrideFile.txt' },
                    environmentVariables: {},
                };
                mockConfigAndOverrideFile(mockConfigJson);

                const err = expectError(() => {
                    new ConfigurationService().getConfig();
                });
                assert.equal(err.message,
                    'Config override file found for "configItemToOverride", but setting not found in schema.');
            });

            it('correct config override file', () => {
                const mockConfigJson = {
                    configItemToOverride: 'initialConfigValue',
                    configOverrideFiles: { configItemToOverride: 'configOverrideFile.txt' },
                    environmentVariables: {},
                };
                mockConfigAndOverrideFile(mockConfigJson);

                const expected = _.cloneDeep(mockConfigJson);
                _.set(expected, 'configItemToOverride', 'overrideConfigValue');

                const actual = new ConfigurationService().getConfig();
                assert.deepEqual(actual, expected);
            });

            function mockConfigAndOverrideFile (mockConfigJson) {
                mockUTF8FileSystemToReturn({
                    'config/config.json': JSON.stringify(mockConfigJson),
                    'config/configOverrideFile.txt': 'overrideConfigValue',
                })();
            }
        });
    });

    function mockConfig (filePath, fileJson) {
        return mockUTF8FileSystemToReturn({ [filePath]: JSON.stringify(fileJson) });
    }

    function mockUTF8FileSystemToReturn (toReturn) {
        return () => {
            // eslint-disable-next-line id-blacklist
            sandbox.stub(fs, 'readFile').callsFake((filePath, encoding, callback) => {
                try {
                    assert(_.has(toReturn, filePath));
                    assert.equal(encoding, 'utf8');
                } catch (err) {
                    callback(err);
                    return;
                }
                callback(null, toReturn[filePath]);
            });

            sandbox.stub(fs, 'readFileSync').callsFake((filePath, encoding) => {
                assert(_.has(toReturn, filePath));
                assert.equal(encoding, 'utf8');
                return toReturn[filePath];
            });
        };
    }

    function unmock () {
        sandbox.restore();
    }

    /* eslint-disable no-process-env */
    function withEnvVars (envVars, func) {
        let oldEnvVars = {};

        setEnvVars();
        func();
        restoreEnvVars();

        function setEnvVars () {
            oldEnvVars = _.pick(process.env, _.keys(envVars));
            _.assign(process.env, envVars);
        }

        function restoreEnvVars () {
            // We unset each variable first, then use _.assign, because environment variables that did not originally
            // exist will not be in oldEnvVars and would not be removed by using _.assign.
            _.forEach(envVars, (value, key) => {
                _.unset(process.env, key, value);
            });
            _.assign(process.env, oldEnvVars);
        }
    }
    /* eslint-enable */
});
